services:
  # 1. Serviço do Banco de Dados PostgreSQL
  postgres_db:
    image: postgres:14-alpine
    container_name: walletai_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. Serviço do Backend (Node.js)
  backend:
    build: ./backend
    container_name: walletai_backend
    restart: always
    ports:
      - "${BACKEND_PORT}:3333"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}?schema=public"
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: "1d"
      AI_SERVICE_BASE_URL: "http://ai_service:5000"
    volumes:
      - ./backend/src:/usr/src/app/src # Mapeia o código fonte para live reload
    depends_on:
      postgres_db:
        condition: service_healthy # Só inicia o backend quando o DB estiver pronto

  # 3. Serviço de Inteligência Artificial (Python)
  ai_service:
    build: ./ai-service
    container_name: walletai_ai_service
    restart: always
    ports:
      - "${AI_PORT}:5000"
    volumes:
      - ./ai-service/app:/app/app # Mapeia o código fonte para live reload

  # 4. Serviço do Frontend (React + NGINX)
  frontend:
    build:
      context: ./frontend
      args:
        VITE_API_URL: http://localhost:${BACKEND_PORT}
    container_name: walletai_frontend
    restart: always
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend

volumes:
  postgres_data: